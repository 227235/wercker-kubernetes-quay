build:
    box: google/golang
    steps:
    # Test the project
    - script:
        name: go test
        code: |
          go test ./...

        # Build the project
    - script:
        name: go build
        code: |
          CGO_ENABLED=0 go build -a -installsuffix cgo -o app ./...
        # Copy binary to location that gets passed along to deploy
    - script:
        name: copy binary
        code: cp app cities-service.json cities-blue-controller.json cities-green-controller.json download-kube.sh $WERCKER_OUTPUT_DIR

deploy:
  box: 
    id: busybox
    cmd: /bin/sh
  steps:
  - script:
      name: make executable
      code: chmod +x /pipeline/source/app

  - internal/docker-push:
      username: $USERNAME
      password: $PASSWORD
      cmd: ./pipeline/source/app
      tag: latest
      ports: "5000"
      repository: quay.io/wercker/wercker-kubernetes-quay
      registry: https://quay.io

  # Run this to create the rc and service
  initialize:
  - script:
      name: fetch kube
      code: ./download-kube.sh

  - script:
      name: create rc
      code: |
          kubernetes/platforms/linux/amd64/kubectl \
              --server="${KUBERNETES_MASTER}" \
              --username="${KUBERNETES_USERNAME}" \
              --password="${KUBERNETES_PASSWORD}" \
              --insecure-skip-tls-verify="true" \
              create -f cities-green-controller.json

  - script:
      name: create service
      code: |
          kubernetes/platforms/linux/amd64/kubectl \
              --server="${KUBERNETES_MASTER}" \
              --username="${KUBERNETES_USERNAME}" \
              --password="${KUBERNETES_PASSWORD}" \
              --insecure-skip-tls-verify="true" \
              create -f cities-service.json

  rolling-update:
  - script:
      name: fetch kube
      code: ./download-kube.sh

  - script:
      name: rolling update
      code: |
          info "Retrieving running rc"
          if kubernetes/platforms/linux/amd64/kubectl \
                  --server="${KUBERNETES_MASTER}" \
                  --username="${KUBERNETES_USERNAME}" \
                  --password="${KUBERNETES_PASSWORD}" \
                  --insecure-skip-tls-verify="true" \
                  get rc cities-green > /dev/null 2> /dev/null; then
              info "Currently running rc: cities-green"
              info "Starting rolling-update"
              kubernetes/platforms/linux/amd64/kubectl \
                  --server="${KUBERNETES_MASTER}" \
                  --username="${KUBERNETES_USERNAME}" \
                  --password="${KUBERNETES_PASSWORD}" \
                  --insecure-skip-tls-verify="true" \
                  rolling-update cities-green --update-period=10s -f cities-blue-controller.json
              info "Finished update"
          else
              info "Currently running rc: cities-blue"
              info "Starting rolling-update"
              kubernetes/platforms/linux/amd64/kubectl \
                  --server="${KUBERNETES_MASTER}" \
                  --username="${KUBERNETES_USERNAME}" \
                  --password="${KUBERNETES_PASSWORD}" \
                  --insecure-skip-tls-verify="true" \
                  rolling-update cities-blue --update-period=10s -f cities-green-controller.json
              info "Finished update"
          fi

